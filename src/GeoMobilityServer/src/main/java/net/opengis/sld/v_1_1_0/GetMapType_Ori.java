//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2010.09.03 at 10:04:11 AM MESZ 
//


package net.opengis.sld.v_1_1_0;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.datatype.XMLGregorianCalendar;
import net.opengis.ows.v_1_0_0.BoundingBoxType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom;
import org.jvnet.jaxb2_commons.lang.MergeStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for GetMapType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="GetMapType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element ref="{http://www.opengis.net/sld}StyledLayerDescriptor"/>
 *         &lt;element name="CRS" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="BoundingBox" type="{http://www.opengis.net/ows}BoundingBoxType"/>
 *         &lt;element name="Output" type="{http://www.opengis.net/sld}OutputType"/>
 *         &lt;element name="Exceptions" type="{http://www.opengis.net/sld}ExceptionsType" minOccurs="0"/>
 *         &lt;element name="Time" type="{http://www.w3.org/2001/XMLSchema}dateTime" minOccurs="0"/>
 *         &lt;element name="Elevation" type="{http://www.opengis.net/sld}ElevationType" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="version" type="{http://www.w3.org/2001/XMLSchema}string" fixed="1.3.0" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlRootElement(name = "ogc:GetMap")
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "GetMapType", propOrder = {
    "styledLayerDescriptor",
    "crs",
    "boundingBox",
    "output",
    "exceptions",
    "time",
    "elevation"
})
public class GetMapType_Ori
    implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
{

    @XmlElement(name = "StyledLayerDescriptor", required = true)
    protected StyledLayerDescriptorElement styledLayerDescriptor;
    @XmlElement(name = "CRS", required = true)
    protected String crs;
    @XmlElement(name = "BoundingBox", required = true)
    protected BoundingBoxType boundingBox;
    @XmlElement(name = "Output", required = true)
    protected OutputType output;
    @XmlElement(name = "Exceptions")
    protected ExceptionsType exceptions;
    @XmlElement(name = "Time")
    @XmlSchemaType(name = "dateTime")
    protected XMLGregorianCalendar time;
    @XmlElement(name = "Elevation")
    protected ElevationType elevation;
    /**
     * 
     * 
     */
    @XmlAttribute(name = "version")
    public final static String VERSION = "1.3.0";

    /**
     * Gets the value of the styledLayerDescriptor property.
     * 
     * @return
     *     possible object is
     *     {@link StyledLayerDescriptorElement }
     *     
     */
    public StyledLayerDescriptorElement getStyledLayerDescriptor() {
        return styledLayerDescriptor;
    }

    /**
     * Sets the value of the styledLayerDescriptor property.
     * 
     * @param value
     *     allowed object is
     *     {@link StyledLayerDescriptorElement }
     *     
     */
    public void setStyledLayerDescriptor(StyledLayerDescriptorElement value) {
        this.styledLayerDescriptor = value;
    }

    public boolean isSetStyledLayerDescriptor() {
        return (this.styledLayerDescriptor!= null);
    }

    /**
     * Gets the value of the crs property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCRS() {
        return crs;
    }

    /**
     * Sets the value of the crs property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCRS(String value) {
        this.crs = value;
    }

    public boolean isSetCRS() {
        return (this.crs!= null);
    }

    /**
     * Gets the value of the boundingBox property.
     * 
     * @return
     *     possible object is
     *     {@link BoundingBoxType }
     *     
     */
    public BoundingBoxType getBoundingBox() {
        return boundingBox;
    }

    /**
     * Sets the value of the boundingBox property.
     * 
     * @param value
     *     allowed object is
     *     {@link BoundingBoxType }
     *     
     */
    public void setBoundingBox(BoundingBoxType value) {
        this.boundingBox = value;
    }

    public boolean isSetBoundingBox() {
        return (this.boundingBox!= null);
    }

    /**
     * Gets the value of the output property.
     * 
     * @return
     *     possible object is
     *     {@link OutputType }
     *     
     */
    public OutputType getOutput() {
        return output;
    }

    /**
     * Sets the value of the output property.
     * 
     * @param value
     *     allowed object is
     *     {@link OutputType }
     *     
     */
    public void setOutput(OutputType value) {
        this.output = value;
    }

    public boolean isSetOutput() {
        return (this.output!= null);
    }

    /**
     * Gets the value of the exceptions property.
     * 
     * @return
     *     possible object is
     *     {@link ExceptionsType }
     *     
     */
    public ExceptionsType getExceptions() {
        return exceptions;
    }

    /**
     * Sets the value of the exceptions property.
     * 
     * @param value
     *     allowed object is
     *     {@link ExceptionsType }
     *     
     */
    public void setExceptions(ExceptionsType value) {
        this.exceptions = value;
    }

    public boolean isSetExceptions() {
        return (this.exceptions!= null);
    }

    /**
     * Gets the value of the time property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public XMLGregorianCalendar getTime() {
        return time;
    }

    /**
     * Sets the value of the time property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setTime(XMLGregorianCalendar value) {
        this.time = value;
    }

    public boolean isSetTime() {
        return (this.time!= null);
    }

    /**
     * Gets the value of the elevation property.
     * 
     * @return
     *     possible object is
     *     {@link ElevationType }
     *     
     */
    public ElevationType getElevation() {
        return elevation;
    }

    /**
     * Sets the value of the elevation property.
     * 
     * @param value
     *     allowed object is
     *     {@link ElevationType }
     *     
     */
    public void setElevation(ElevationType value) {
        this.elevation = value;
    }

    public boolean isSetElevation() {
        return (this.elevation!= null);
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            StyledLayerDescriptorElement theStyledLayerDescriptor;
            theStyledLayerDescriptor = this.getStyledLayerDescriptor();
            strategy.appendField(locator, this, "styledLayerDescriptor", buffer, theStyledLayerDescriptor);
        }
        {
            String theCRS;
            theCRS = this.getCRS();
            strategy.appendField(locator, this, "crs", buffer, theCRS);
        }
        {
            BoundingBoxType theBoundingBox;
            theBoundingBox = this.getBoundingBox();
            strategy.appendField(locator, this, "boundingBox", buffer, theBoundingBox);
        }
        {
            OutputType theOutput;
            theOutput = this.getOutput();
            strategy.appendField(locator, this, "output", buffer, theOutput);
        }
        {
            ExceptionsType theExceptions;
            theExceptions = this.getExceptions();
            strategy.appendField(locator, this, "exceptions", buffer, theExceptions);
        }
        {
            XMLGregorianCalendar theTime;
            theTime = this.getTime();
            strategy.appendField(locator, this, "time", buffer, theTime);
        }
        {
            ElevationType theElevation;
            theElevation = this.getElevation();
            strategy.appendField(locator, this, "elevation", buffer, theElevation);
        }
        {
            String theVERSION;
            theVERSION = GetMapType_Ori.VERSION;
            strategy.appendField(locator, this, "version", buffer, theVERSION);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof GetMapType_Ori)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final GetMapType_Ori that = ((GetMapType_Ori) object);
        {
            StyledLayerDescriptorElement lhsStyledLayerDescriptor;
            lhsStyledLayerDescriptor = this.getStyledLayerDescriptor();
            StyledLayerDescriptorElement rhsStyledLayerDescriptor;
            rhsStyledLayerDescriptor = that.getStyledLayerDescriptor();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "styledLayerDescriptor", lhsStyledLayerDescriptor), LocatorUtils.property(thatLocator, "styledLayerDescriptor", rhsStyledLayerDescriptor), lhsStyledLayerDescriptor, rhsStyledLayerDescriptor)) {
                return false;
            }
        }
        {
            String lhsCRS;
            lhsCRS = this.getCRS();
            String rhsCRS;
            rhsCRS = that.getCRS();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "crs", lhsCRS), LocatorUtils.property(thatLocator, "crs", rhsCRS), lhsCRS, rhsCRS)) {
                return false;
            }
        }
        {
            BoundingBoxType lhsBoundingBox;
            lhsBoundingBox = this.getBoundingBox();
            BoundingBoxType rhsBoundingBox;
            rhsBoundingBox = that.getBoundingBox();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "boundingBox", lhsBoundingBox), LocatorUtils.property(thatLocator, "boundingBox", rhsBoundingBox), lhsBoundingBox, rhsBoundingBox)) {
                return false;
            }
        }
        {
            OutputType lhsOutput;
            lhsOutput = this.getOutput();
            OutputType rhsOutput;
            rhsOutput = that.getOutput();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "output", lhsOutput), LocatorUtils.property(thatLocator, "output", rhsOutput), lhsOutput, rhsOutput)) {
                return false;
            }
        }
        {
            ExceptionsType lhsExceptions;
            lhsExceptions = this.getExceptions();
            ExceptionsType rhsExceptions;
            rhsExceptions = that.getExceptions();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "exceptions", lhsExceptions), LocatorUtils.property(thatLocator, "exceptions", rhsExceptions), lhsExceptions, rhsExceptions)) {
                return false;
            }
        }
        {
            XMLGregorianCalendar lhsTime;
            lhsTime = this.getTime();
            XMLGregorianCalendar rhsTime;
            rhsTime = that.getTime();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "time", lhsTime), LocatorUtils.property(thatLocator, "time", rhsTime), lhsTime, rhsTime)) {
                return false;
            }
        }
        {
            ElevationType lhsElevation;
            lhsElevation = this.getElevation();
            ElevationType rhsElevation;
            rhsElevation = that.getElevation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "elevation", lhsElevation), LocatorUtils.property(thatLocator, "elevation", rhsElevation), lhsElevation, rhsElevation)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            StyledLayerDescriptorElement theStyledLayerDescriptor;
            theStyledLayerDescriptor = this.getStyledLayerDescriptor();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "styledLayerDescriptor", theStyledLayerDescriptor), currentHashCode, theStyledLayerDescriptor);
        }
        {
            String theCRS;
            theCRS = this.getCRS();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "crs", theCRS), currentHashCode, theCRS);
        }
        {
            BoundingBoxType theBoundingBox;
            theBoundingBox = this.getBoundingBox();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "boundingBox", theBoundingBox), currentHashCode, theBoundingBox);
        }
        {
            OutputType theOutput;
            theOutput = this.getOutput();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "output", theOutput), currentHashCode, theOutput);
        }
        {
            ExceptionsType theExceptions;
            theExceptions = this.getExceptions();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "exceptions", theExceptions), currentHashCode, theExceptions);
        }
        {
            XMLGregorianCalendar theTime;
            theTime = this.getTime();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "time", theTime), currentHashCode, theTime);
        }
        {
            ElevationType theElevation;
            theElevation = this.getElevation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "elevation", theElevation), currentHashCode, theElevation);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof GetMapType_Ori) {
            final GetMapType_Ori copy = ((GetMapType_Ori) draftCopy);
            if (this.isSetStyledLayerDescriptor()) {
                StyledLayerDescriptorElement sourceStyledLayerDescriptor;
                sourceStyledLayerDescriptor = this.getStyledLayerDescriptor();
                StyledLayerDescriptorElement copyStyledLayerDescriptor = ((StyledLayerDescriptorElement) strategy.copy(LocatorUtils.property(locator, "styledLayerDescriptor", sourceStyledLayerDescriptor), sourceStyledLayerDescriptor));
                copy.setStyledLayerDescriptor(copyStyledLayerDescriptor);
            } else {
                copy.styledLayerDescriptor = null;
            }
            if (this.isSetCRS()) {
                String sourceCRS;
                sourceCRS = this.getCRS();
                String copyCRS = ((String) strategy.copy(LocatorUtils.property(locator, "crs", sourceCRS), sourceCRS));
                copy.setCRS(copyCRS);
            } else {
                copy.crs = null;
            }
            if (this.isSetBoundingBox()) {
                BoundingBoxType sourceBoundingBox;
                sourceBoundingBox = this.getBoundingBox();
                BoundingBoxType copyBoundingBox = ((BoundingBoxType) strategy.copy(LocatorUtils.property(locator, "boundingBox", sourceBoundingBox), sourceBoundingBox));
                copy.setBoundingBox(copyBoundingBox);
            } else {
                copy.boundingBox = null;
            }
            if (this.isSetOutput()) {
                OutputType sourceOutput;
                sourceOutput = this.getOutput();
                OutputType copyOutput = ((OutputType) strategy.copy(LocatorUtils.property(locator, "output", sourceOutput), sourceOutput));
                copy.setOutput(copyOutput);
            } else {
                copy.output = null;
            }
            if (this.isSetExceptions()) {
                ExceptionsType sourceExceptions;
                sourceExceptions = this.getExceptions();
                ExceptionsType copyExceptions = ((ExceptionsType) strategy.copy(LocatorUtils.property(locator, "exceptions", sourceExceptions), sourceExceptions));
                copy.setExceptions(copyExceptions);
            } else {
                copy.exceptions = null;
            }
            if (this.isSetTime()) {
                XMLGregorianCalendar sourceTime;
                sourceTime = this.getTime();
                XMLGregorianCalendar copyTime = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "time", sourceTime), sourceTime));
                copy.setTime(copyTime);
            } else {
                copy.time = null;
            }
            if (this.isSetElevation()) {
                ElevationType sourceElevation;
                sourceElevation = this.getElevation();
                ElevationType copyElevation = ((ElevationType) strategy.copy(LocatorUtils.property(locator, "elevation", sourceElevation), sourceElevation));
                copy.setElevation(copyElevation);
            } else {
                copy.elevation = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new GetMapType_Ori();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
        if (right instanceof GetMapType_Ori) {
            final GetMapType_Ori target = this;
            final GetMapType_Ori leftObject = ((GetMapType_Ori) left);
            final GetMapType_Ori rightObject = ((GetMapType_Ori) right);
            {
                StyledLayerDescriptorElement lhsStyledLayerDescriptor;
                lhsStyledLayerDescriptor = leftObject.getStyledLayerDescriptor();
                StyledLayerDescriptorElement rhsStyledLayerDescriptor;
                rhsStyledLayerDescriptor = rightObject.getStyledLayerDescriptor();
                target.setStyledLayerDescriptor(((StyledLayerDescriptorElement) strategy.merge(LocatorUtils.property(leftLocator, "styledLayerDescriptor", lhsStyledLayerDescriptor), LocatorUtils.property(rightLocator, "styledLayerDescriptor", rhsStyledLayerDescriptor), lhsStyledLayerDescriptor, rhsStyledLayerDescriptor)));
            }
            {
                String lhsCRS;
                lhsCRS = leftObject.getCRS();
                String rhsCRS;
                rhsCRS = rightObject.getCRS();
                target.setCRS(((String) strategy.merge(LocatorUtils.property(leftLocator, "crs", lhsCRS), LocatorUtils.property(rightLocator, "crs", rhsCRS), lhsCRS, rhsCRS)));
            }
            {
                BoundingBoxType lhsBoundingBox;
                lhsBoundingBox = leftObject.getBoundingBox();
                BoundingBoxType rhsBoundingBox;
                rhsBoundingBox = rightObject.getBoundingBox();
                target.setBoundingBox(((BoundingBoxType) strategy.merge(LocatorUtils.property(leftLocator, "boundingBox", lhsBoundingBox), LocatorUtils.property(rightLocator, "boundingBox", rhsBoundingBox), lhsBoundingBox, rhsBoundingBox)));
            }
            {
                OutputType lhsOutput;
                lhsOutput = leftObject.getOutput();
                OutputType rhsOutput;
                rhsOutput = rightObject.getOutput();
                target.setOutput(((OutputType) strategy.merge(LocatorUtils.property(leftLocator, "output", lhsOutput), LocatorUtils.property(rightLocator, "output", rhsOutput), lhsOutput, rhsOutput)));
            }
            {
                ExceptionsType lhsExceptions;
                lhsExceptions = leftObject.getExceptions();
                ExceptionsType rhsExceptions;
                rhsExceptions = rightObject.getExceptions();
                target.setExceptions(((ExceptionsType) strategy.merge(LocatorUtils.property(leftLocator, "exceptions", lhsExceptions), LocatorUtils.property(rightLocator, "exceptions", rhsExceptions), lhsExceptions, rhsExceptions)));
            }
            {
                XMLGregorianCalendar lhsTime;
                lhsTime = leftObject.getTime();
                XMLGregorianCalendar rhsTime;
                rhsTime = rightObject.getTime();
                target.setTime(((XMLGregorianCalendar) strategy.merge(LocatorUtils.property(leftLocator, "time", lhsTime), LocatorUtils.property(rightLocator, "time", rhsTime), lhsTime, rhsTime)));
            }
            {
                ElevationType lhsElevation;
                lhsElevation = leftObject.getElevation();
                ElevationType rhsElevation;
                rhsElevation = rightObject.getElevation();
                target.setElevation(((ElevationType) strategy.merge(LocatorUtils.property(leftLocator, "elevation", lhsElevation), LocatorUtils.property(rightLocator, "elevation", rhsElevation), lhsElevation, rhsElevation)));
            }
        }
    }

}
